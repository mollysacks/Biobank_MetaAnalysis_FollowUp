genomatrix$PC1 <- my_genomatrix$PC1 # PCs
genomatrix$PC2 <- my_genomatrix$PC2
genomatrix$PC3 <- my_genomatrix$PC3
genomatrix$PC4 <- my_genomatrix$PC4
genomatrix$PC5 <- my_genomatrix$PC5
genomatrix$PC6 <- my_genomatrix$PC6
genomatrix$PC7 <- my_genomatrix$PC7
genomatrix$PC8 <- my_genomatrix$PC8
genomatrix$PC9 <- my_genomatrix$PC9
genomatrix$PC10 <- my_genomatrix$PC10
# prs
genomatrix$PRS_BMI_zscore <- my_genomatrix$BMI_SCORE1_SUM_zscore # whatever your z-scored PRS_SCORE1_SUM column is called
# testable CNVs (rename based on what yours are named)
genomatrix$locus_13q12.12 <- my_genomatrix$locus_13q12.12_allele_specific
genomatrix$locus_13q12.12 <- my_genomatrix$locus_13q12.12_allele_specific
genomatrix$locus_15q11.2_BP1_BP2_CYFIP <- my_genomatrix$locus_15q11.2__BP1_BP2_CYFIP_allele_specific
genomatrix$locus_15q11.2_BP1_BP2_CYFIP <- my_genomatrix$locus_15q11.2__BP1_BP2_CYFIP_allele_specific
genomatrix$locus_15q13.3_inclCHRNA7 <- my_genomatrix$locus_15q13.3_inclCHRNA7_allele_specific
genomatrix$locus_15q13.3_inclCHRNA7<- my_genomatrix$locus_15q13.3_inclCHRNA7_allele_specific
genomatrix$locus_16p11.2_distal <- my_genomatrix$locus_16p11.2_distal_allele_specific
genomatrix$locus_16p11.2_proximal <- my_genomatrix$locus_16p11.2_proximal_allele_specific
genomatrix$locus_16p11.2_proximal <- my_genomatrix$locus_16p11.2_proximal_allele_specific
genomatrix$locus_16p12.1_BP1_BP2 <- my_genomatrix$locus_16p12.1_BP1_BP2_allele_specific
genomatrix$locus_16p12.1_BP1_BP2 <- my_genomatrix$locus_16p12.1_BP1_BP2_allele_specific
genomatrix$locus_16p12.1_BP2_BP3 <- my_genomatrix$locus_16p12.1_BP2_BP3_allele_specific
genomatrix$locus_16p12.1_BP2_BP3 <- my_genomatrix$locus_16p12.1_BP2_BP3_allele_specific
genomatrix$locus_16p13.11_BP1_BP2 <- my_genomatrix$locus_16p13.11_BP1_BP2_allele_specific
genomatrix$locus_16p13.11_BP1_BP2 <- my_genomatrix$locus_16p13.11_BP1_BP2_allele_specific
genomatrix$locus_16p13.11_BP1_BP3 <- my_genomatrix$locus_16p13.11_BP1_BP3_allele_specific
genomatrix$locus_17p12 <- my_genomatrix$locus_17p12_allele_specific
genomatrix$locus_17p12 <- my_genomatrix$locus_17p12_allele_specific
genomatrix$locus_17q12 <- my_genomatrix$locus_17q12_allele_specific
genomatrix$locus_1q21.1 <- my_genomatrix$locus_1q21.1_allele_specific
genomatrix$locus_1q21.1 <- my_genomatrix$locus_1q21.1_allele_specific
genomatrix$locus_1q21.1_TAR_BP1_BP2  <- my_genomatrix$locus_1q21.1_TAR_BP1_BP2_DEL_allele_specific
genomatrix$locus_1q21.1_TAR_BP1_BP2 <- my_genomatrix$locus_1q21.1_TAR_BP1_BP2_DUP_allele_specific
genomatrix$locus_1q21.1_TAR_BP1_BP3 <- my_genomatrix$locus_1q21.1_TAR_BP1_BP3_DUP_allele_specific
genomatrix$locus_1q21.1_TAR_BP2_BP3 <- my_genomatrix$locus_1q21.1_TAR_BP2_BP3_DUP_allele_specific
genomatrix$locus_22q11.2_BP1_BP2_A_B <- my_genomatrix$locus_22q11.2_BP1_BP2_A_B_allele_specific
genomatrix$locus_22q11.2_BP1_BP4_A_D <- my_genomatrix$locus_22q11.2_BP1_BP4_A_D_allele_specific
genomatrix$locus_22q11.2_BP2_BP4_B_D <- my_genomatrix$locus_22q11.2_BP2_BP4_B_D_allele_specific
genomatrix$locus_22q11.2_BP3_BP4_C_D <- my_genomatrix$locus_22q11.2_BP3_BP4_C_D_allele_specific
genomatrix$locus_22q11.2_BP6_BP8_F_H <- my_genomatrix$locus_22q11.2_BP6_BP8_F_H_allele_specific
genomatrix$locus_22q13 <- my_genomatrix$locus_22q13_allele_specific
genomatrix$locus_2q13_NPHP1 <- my_genomatrix$locus_22q13_allele_specific
prefix <- 'PRS_BMI_by_chromosome/UKBB_bmi_locke_pst_eff_a1_b0.5_phi1e-02.txt.chr'
suffix <- '.sscore'
names <- c('FID', 'IID', 'ALLELE_CT', 'NAMED_ALLELE_DOSAGE_SUM', 'SCORE1_AVG', 'SCORE1_SUM')
for(i in 1:22){
# read in data
PRS_i <- read.table(paste(prefix, as.character(i), suffix, sep=''), header = FALSE, col.names = names)
rownames(PRS_i) <- PRS_i$IID
# filter to rows that are in genomatrix
PRS_i <- PRS_i[genomatrix$sampleID, ]
# add to genomatrix
genomatrix[,paste('chr', as.character(i), 'PRS_BMI')] <- PRS_i$SCORE1_SUM
}
# Add medication information
medication_df <- read.csv('medication.csv')
rownames(medication) <- medication$identifier # rename rows to sampleID
# Add medication information
medication_df <- read.csv('medication.csv')
rownames(medication_df) <- medication_df$identifier # rename rows to sampleID
medication_df <- medication_df[genomatrix$sampleID,] # match rows to genomatrix
genomatrix$medication <- medication_df$medication # add medication column
View(histogram)
View(genomatrix)
source("~/sebatlab Dropbox/G2MH/NetworkPaper/AnalysisByMolly/UKBB/BMI/BMI_FollowUpAnalyses_09182023.R", echo=TRUE)
source("~/sebatlab Dropbox/G2MH/NetworkPaper/AnalysisByMolly/UKBB/BMI/BMI_FollowUpAnalyses_09182023.R", echo=TRUE)
View(genomatrix)
testable
View(main_effects)
source("~/sebatlab Dropbox/G2MH/NetworkPaper/AnalysisByMolly/UKBB/BMI/BMI_FollowUpAnalyses_09182023.R", echo=TRUE)
for(i in seq_along(testable_CNVs)){
CNV <- testable_CNVs[i] # get name of CNV
loc <- paste("locus", substr(CNV, nchar(CNV) - 4, nchar(CNV)), sep='_') # get locus
cn <- ifelse(main_effects[gen, "genotype"] == 'deletion', 1, 3) # get copy number
# Fill in fourth genotype if third is filled
genomatrix$CNV_genotype_4 <- ifelse(!is.na(genomatrix$CNV_genotype_3) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in third genotype if second is filled
genomatrix$CNV_genotype_3 <- ifelse(!is.na(genomatrix$CNV_genotype_2) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in second genotype if first is filled
genomatrix$CNV_genotype_2 <- ifelse(!is.na(genomatrix$CNV_genotype_1) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in first genotype
genomatrix$CNV_genotype_1 <- ifelse(is.na(genomatrix$CNV_genotype_1), # if sample does not already have CNV
ifelse(genomatrix[[loc]] == cn, CNV, NA), # if loc== cn, CNV, else NA
genomatrix$CNV_genotype_1) # keep column the same if it already has CNV
}
for(i in seq_along(testable_CNVs)){
CNV <- testable_CNVs[i] # get name of CNV
loc <- paste("locus", substr(CNV, nchar(CNV) - 4, nchar(CNV)), sep='_') # get locus
cn <- ifelse(main_effects[CNV, "genotype"] == 'deletion', 1, 3) # get copy number
# Fill in fourth genotype if third is filled
genomatrix$CNV_genotype_4 <- ifelse(!is.na(genomatrix$CNV_genotype_3) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in third genotype if second is filled
genomatrix$CNV_genotype_3 <- ifelse(!is.na(genomatrix$CNV_genotype_2) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in second genotype if first is filled
genomatrix$CNV_genotype_2 <- ifelse(!is.na(genomatrix$CNV_genotype_1) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in first genotype
genomatrix$CNV_genotype_1 <- ifelse(is.na(genomatrix$CNV_genotype_1), # if sample does not already have CNV
ifelse(genomatrix[[loc]] == cn, CNV, NA), # if loc== cn, CNV, else NA
genomatrix$CNV_genotype_1) # keep column the same if it already has CNV
}
### Create CNV genotype column for all testable CNVs (allows for individuals with up to 4 CNVs)
testable_CNVs <- testable$locus
for(i in seq_along(testable_CNVs)){
CNV <- testable_CNVs[i] # get name of CNV
loc <- paste("locus", substr(CNV, nchar(CNV) - 4, nchar(CNV)), sep='_') # get locus
cn <- ifelse(main_effects[CNV, "genotype"] == 'deletion', 1, 3) # get copy number
# Debugging information
cat("CNV:", CNV, "\n")
cat("loc:", loc, "\n")
cat("cn:", cn, "\n")
# Fill in fourth genotype if third is filled
genomatrix$CNV_genotype_4 <- ifelse(!is.na(genomatrix$CNV_genotype_3) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in third genotype if second is filled
genomatrix$CNV_genotype_3 <- ifelse(!is.na(genomatrix$CNV_genotype_2) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in second genotype if first is filled
genomatrix$CNV_genotype_2 <- ifelse(!is.na(genomatrix$CNV_genotype_1) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in first genotype
genomatrix$CNV_genotype_1 <- ifelse(is.na(genomatrix$CNV_genotype_1), # if sample does not already have CNV
ifelse(genomatrix[[loc]] == cn, CNV, NA), # if loc== cn, CNV, else NA
genomatrix$CNV_genotype_1) # keep column the same if it already has CNV
}
for(i in seq_along(testable_CNVs)){
CNV <- testable_CNVs[i] # get name of CNV
loc <- paste("locus", substr(CNV, 1, nchar(CNV) - 4), sep='_') # get locus
cn <- ifelse(main_effects[CNV, "genotype"] == 'deletion', 1, 3) # get copy number
# Debugging information
cat("CNV:", CNV, "\n")
cat("loc:", loc, "\n")
cat("cn:", cn, "\n")
# Fill in fourth genotype if third is filled
genomatrix$CNV_genotype_4 <- ifelse(!is.na(genomatrix$CNV_genotype_3) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in third genotype if second is filled
genomatrix$CNV_genotype_3 <- ifelse(!is.na(genomatrix$CNV_genotype_2) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in second genotype if first is filled
genomatrix$CNV_genotype_2 <- ifelse(!is.na(genomatrix$CNV_genotype_1) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in first genotype
genomatrix$CNV_genotype_1 <- ifelse(is.na(genomatrix$CNV_genotype_1), # if sample does not already have CNV
ifelse(genomatrix[[loc]] == cn, CNV, NA), # if loc== cn, CNV, else NA
genomatrix$CNV_genotype_1) # keep column the same if it already has CNV
}
rownames(main_effects) <- main_effects$locus
### Create CNV genotype column for all testable CNVs (allows for individuals with up to 4 CNVs)
testable_CNVs <- testable$locus
rownames(testable) <- testable$locus
genomatrix$CNV_genotype_1 <- NA
genomatrix$CNV_genotype_2 <- NA
genomatrix$CNV_genotype_3 <- NA
genomatrix$CNV_genotype_4 <- NA
for(i in seq_along(testable_CNVs)){
CNV <- testable_CNVs[i] # get name of CNV
loc <- paste("locus", substr(CNV, 1, nchar(CNV) - 4), sep='_') # get locus
cn <- ifelse(main_effects[CNV, "genotype"] == 'deletion', 1, 3) # get copy number
# Debugging information
cat("CNV:", CNV, "\n")
cat("loc:", loc, "\n")
cat("cn:", cn, "\n")
# Fill in fourth genotype if third is filled
genomatrix$CNV_genotype_4 <- ifelse(!is.na(genomatrix$CNV_genotype_3) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in third genotype if second is filled
genomatrix$CNV_genotype_3 <- ifelse(!is.na(genomatrix$CNV_genotype_2) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in second genotype if first is filled
genomatrix$CNV_genotype_2 <- ifelse(!is.na(genomatrix$CNV_genotype_1) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in first genotype
genomatrix$CNV_genotype_1 <- ifelse(is.na(genomatrix$CNV_genotype_1), # if sample does not already have CNV
ifelse(genomatrix[[loc]] == cn, CNV, NA), # if loc== cn, CNV, else NA
genomatrix$CNV_genotype_1) # keep column the same if it already has CNV
}
CNV
loc
### Create CNV genotype column for all testable CNVs (allows for individuals with up to 4 CNVs)
testable_CNVs <- testable$locus
rownames(testable) <- testable$locus
genomatrix$CNV_genotype_1 <- NA
genomatrix$CNV_genotype_2 <- NA
genomatrix$CNV_genotype_3 <- NA
genomatrix$CNV_genotype_4 <- NA
for(i in seq_along(testable_CNVs)){
CNV <- testable_CNVs[i] # get name of CNV
loc <- paste("locus", substr(CNV, 1, nchar(CNV) - 4), sep='_') # get locus
cn <- ifelse(testable[CNV, "genotype"] == 'deletion', 1, 3) # get copy number
# Debugging information
cat("CNV:", CNV, "\n")
cat("loc:", loc, "\n")
cat("cn:", cn, "\n")
# Fill in fourth genotype if third is filled
genomatrix$CNV_genotype_4 <- ifelse(!is.na(genomatrix$CNV_genotype_3) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in third genotype if second is filled
genomatrix$CNV_genotype_3 <- ifelse(!is.na(genomatrix$CNV_genotype_2) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in second genotype if first is filled
genomatrix$CNV_genotype_2 <- ifelse(!is.na(genomatrix$CNV_genotype_1) & (genomatrix[[loc]] == cn), CNV, NA)
# Fill in first genotype
genomatrix$CNV_genotype_1 <- ifelse(is.na(genomatrix$CNV_genotype_1), # if sample does not already have CNV
ifelse(genomatrix[[loc]] == cn, CNV, NA), # if loc== cn, CNV, else NA
genomatrix$CNV_genotype_1) # keep column the same if it already has CNV
}
ifelse(!is.na(genomatrix$CNV_genotype_3) & (genomatrix[[loc]] == cn), CNV, NA)
rownames(genomatrix)
### Create CNV genotype column for all testable CNVs (allows for individuals with up to 4 CNVs)
testable_CNVs <- testable$locus
rownames(testable) <- testable$locus
genomatrix$CNV_genotype_1 <- NA
genomatrix$CNV_genotype_2 <- NA
genomatrix$CNV_genotype_3 <- NA
genomatrix$CNV_genotype_4 <- NA
for(i in seq_along(testable_CNVs)){
CNV <- testable_CNVs[i] # get name of CNV
loc <- paste("locus", substr(CNV, 1, nchar(CNV) - 4), sep='_') # get locus
cn <- ifelse(testable[CNV, "genotype"] == 'deletion', 1, 3) # get copy number
# get rows with CNV that don't already have another CNV
rows1 <- which((genomatrix[[loc]] == cn) & (is.na(genomatrix$CNV_genotype_1)))
# get rows with CNV that already have 1 CNV
rows2 <- which((genomatrix[[loc]] == cn) & (!is.na(genomatrix$CNV_genotype_1) & (is.na(genomatrix$CNV_genotype_2))))
# get rows with CNV that already have 2 CNV
rows1 <- which((genomatrix[[loc]] == cn) & (!is.na(genomatrix$CNV_genotype_2) & (is.na(genomatrix$CNV_genotype_3))))
# get rows with CNV that already have 3 CNVs
rows1 <- which((genomatrix[[loc]] == cn) & (!is.na(genomatrix$CNV_genotype_3) & (is.na(genomatrix$CNV_genotype_4))))
# Fill in genotypes
genomatrix[rows4, "CNV_genotype_4"] <- CNV
genomatrix[rows3, "CNV_genotype_3"] <- CNV
genomatrix[rows2, "CNV_genotype_2"] <- CNV
genomatrix[rows1, "CNV_genotype_1"] <- CNV
}
for(i in seq_along(testable_CNVs)){
CNV <- testable_CNVs[i] # get name of CNV
loc <- paste("locus", substr(CNV, 1, nchar(CNV) - 4), sep='_') # get locus
cn <- ifelse(testable[CNV, "genotype"] == 'deletion', 1, 3) # get copy number
# get rows with CNV that don't already have another CNV
rows1 <- which((genomatrix[[loc]] == cn) & (is.na(genomatrix$CNV_genotype_1)))
# get rows with CNV that already have 1 CNV
rows2 <- which((genomatrix[[loc]] == cn) & (!is.na(genomatrix$CNV_genotype_1) & (is.na(genomatrix$CNV_genotype_2))))
# get rows with CNV that already have 2 CNV
rows3 <- which((genomatrix[[loc]] == cn) & (!is.na(genomatrix$CNV_genotype_2) & (is.na(genomatrix$CNV_genotype_3))))
# get rows with CNV that already have 3 CNVs
rows4 <- which((genomatrix[[loc]] == cn) & (!is.na(genomatrix$CNV_genotype_3) & (is.na(genomatrix$CNV_genotype_4))))
# Fill in genotypes
genomatrix[rows4, "CNV_genotype_4"] <- CNV
genomatrix[rows3, "CNV_genotype_3"] <- CNV
genomatrix[rows2, "CNV_genotype_2"] <- CNV
genomatrix[rows1, "CNV_genotype_1"] <- CNV
}
View(genomatrix)
nrow(genomatrix[which(!is.na(genomatrix$CNV_genotype_1),])
nrow(genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),])
table(genomatrix$CNV_genotype_1)
View(testable)
source("~/sebatlab Dropbox/G2MH/NetworkPaper/AnalysisByMolly/UKBB/BMI/BMI_FollowUpAnalyses_09182023.R", echo=TRUE)
View(genomatrix)
table(genomatrix$CNV_genotype_1)
table(genomatrix$CNV_genotype_2)
table(genomatrix$CNV_genotype_3)
table(genomatrix$CNV_genotype_4)
View(testable)
### Create CNV group column
# individuals with CNVs in multiple groups are NA for this
genomatrix$group1 <- NA
genomatrix$group1 <- testable[genomatrix$CNV_genotype_1, 'CNV_effect_label']
View(genomatrix)
### Create CNV group column
# individuals with CNVs in multiple groups are NA for this
genomatrix$group1 <- NA
genomatrix$group1 <- testable[genomatrix$CNV_genotype_1, 'CNV_effect_label']
genomatrix$group2 <- NA
genomatrix$group2 <- testable[genomatrix$CNV_genotype_2, 'CNV_effect_label']
genomatrix$group3 <- NA
genomatrix$group3 <- testable[genomatrix$CNV_genotype_3, 'CNV_effect_label']
genomatrix$group4 <- NA
genomatrix$group4 <- testable[genomatrix$CNV_genotype_4, 'CNV_effect_label']
genomatrix$CNV_group <- union(genomatrix$group1, genomatrix$group2, genomatrix$group3, genomatrix$group4)
genomatrix <- genomatrix %>%
mutate(CNV_group = union(group1, group2, group3, group4))
genomatrix <- genomatrix %>%
mutate(CNV_group = union(group1, group2, group3, group4, na.rm = TRUE))
rlang::last_trace()
loc <- paste("locus", main_effects[gen, "locus"], "allele_specific", sep='_')
genomatrix <- genomatrix %>%
mutate(CNV_group = union(group1, group2, group3, group4, na.rm = TRUE))
genomatrix$CNV_group <- c(genomatrix$group1, genomatrix$group2, genomatrix$group3, genomatrix$group4)
genomatrix <- genomatrix %>%
rowwise() %>%
mutate(CNV_group = list(pmap(list(group1, group2, group3, group4), c)))
View(genomatrix)
source("~/sebatlab Dropbox/G2MH/NetworkPaper/AnalysisByMolly/UKBB/BMI/BMI_FollowUpAnalyses_09182023.R", echo=TRUE)
View(genomatrix)
table(genomatrix$group)
table(testable$CNV_effect_label)
testable
View(testable)
table(genomatrix$group1, genomatrix$group2, genomatrix$group3, genomatrix$group4)
table(genomatrix$group1)
table(genomatrix$group1, genomatrix$group2)
table(genomatrix$group2, genomatrix$group3)
genomatrix <- genomatrix %>%
mutate(group =
ifelse((is.na(group1)) & (is.na(group2)) & (is.na(group3)) & (is.na(group4)), NA,
ifelse(is.na(group2), group1,
ifelse(is.na(group3), ifelse(group1 == group2, group2, NA),
ifelse(is.na(group4), ifelse((group1 == group2) & (group2=group3), group3, NA), NA)))))
genomatrix <- genomatrix %>%
mutate(group =
ifelse((is.na(group1)) & (is.na(group2)) & (is.na(group3)) & (is.na(group4)), NA,
ifelse(is.na(group2), group1,
ifelse(is.na(group3), ifelse(group1 == group2, group2, NA),
ifelse(is.na(group4), ifelse((group1 == group2) & (group2==group3), group3, NA), NA)))))
View(genomatrix)
View(genomatrix[which(!is.na(genomatrix$group2)),])
View(testable)
genomatrix$CNV_effect_continuous <- 0
### Create CNV effect size column for only significant positive/negative CNVs
# For individuals with multiple positive or negative CNVs, add effect sizes
testable$effect_size <- 0
testable[which(testable$CNV_effect_label %in% c('negative', 'positive')), 'effect_size'] <- testable$estimate_CNV_main
### Create CNV effect size column for only significant positive/negative CNVs
# For individuals with multiple positive or negative CNVs, add effect sizes
testable$effect_size <- 0
testable[which(testable$CNV_effect_label %in% c('negative', 'positive')), 'effect_size'] <-
testable[which(testable$CNV_effect_label %in% c('negative', 'positive')), 'estimate_CNV_main']
View(testable)
genomatrix$CNV_effect_continuous <- 0
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] <-
testable[genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'locus'], 'estimate_CNV_main']
View(testable)
genomatrix$CNV_effect_continuous <- 0
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] <-
testable[genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_genotype_1'], 'estimate_CNV_main']
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_genotype_1']
testable[genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_genotype_1'], 'estimate_CNV_main']
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] <- genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] +
testable[genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_genotype_1'], 'estimate_CNV_main']
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_genotype_1']
testable[genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_genotype_1']]
testable[genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_genotype_1'],]
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous']
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] <- genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] +
testable[c(genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_genotype_1']), 'estimate_CNV_main']
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] <- genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] +
testable[genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_genotype_1'], 'estimate_CNV_main']
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] <- genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] +
ifelse("hi"=="hi", 0, 1)
genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] <- genomatrix[which(!is.na(genomatrix$CNV_genotype_1)),'CNV_effect_continuous'] +
ifelse("hi"=="hi", 10, 1)
View(genomatrix)
testable[NA,] <- c(0,0,0,0,0,0,0,0,0,0)
as.character(NA)
testable['NA',] <- c(0,0,0,0,0,0,0,0,0,0)
genomatrix$CNV_effect_continuous <- 0
genomatrix$CNV_effect_continuous <- genomatrix$CNV_effect_continuous + testable[as.character(genomatrix$CNV_genotype_1),'effect_size']
View(genomatrix)
View(testable)
# Sex
genomatrix_male <- genomatrix[which(genomatrix$sex == 1),]
genomatrix_female <- genomatrix[which(genomatrix$sex == 2),]
# PRS quantile
genomatrix_PRS1 <- genomatrix[which(genomatrix$PRS_BMI_quantile == 1),]
genomatrix_PRS2 <- genomatrix[which(genomatrix$PRS_BMI_quantile == 2),]
genomatrix_PRS3 <- genomatrix[which(genomatrix$PRS_BMI_quantile == 3),]
genomatrix_PRS4 <- genomatrix[which(genomatrix$PRS_BMI_quantile == 4),]
# PRS quantile odd
genomatrix_odd_chr_PRS1 <- genomatrix[which(genomatrix$odd_chr_PRS_BMI_quantile == 1),]
genomatrix_odd_chr_PRS2 <- genomatrix[which(genomatrix$odd_chr_PRS_BMI_quantile == 2),]
genomatrix_odd_chr_PRS3 <- genomatrix[which(genomatrix$odd_chr_PRS_BMI_quantile == 3),]
genomatrix_odd_chr_PRS4 <- genomatrix[which(genomatrix$odd_chr_PRS_BMI_quantile == 4),]
# PRS quantile even
genomatrix_even_chr_PRS1 <- genomatrix[which(genomatrix$even_chr_PRS_BMI_quantile == 1),]
genomatrix_even_chr_PRS2 <- genomatrix[which(genomatrix$even_chr_PRS_BMI_quantile == 2),]
genomatrix_even_chr_PRS3 <- genomatrix[which(genomatrix$even_chr_PRS_BMI_quantile == 3),]
genomatrix_even_chr_PRS4 <- genomatrix[which(genomatrix$even_chr_PRS_BMI_quantile == 4),]
# CNV genotype (store in another df)
genomatrix_CNV_genotype <- data.frame(matrix(nrow= nrow(testable), ncol=0))
genomatrix_CNV_genotype$locus <- testable$locus
# only include people with 1 CNV for this part
genomatrix_CNV_genotype$df <- genomatrix[which(is.na(genomatrix$CNV_genotype_2) & (genomatrix$CNV_genotype_1 == genomatrix_CNV_genotype$locus))]
# only include people with 1 CNV for this part
genomatrix_CNV_genotype$df <- genomatrix[which(is.na(genomatrix$CNV_genotype_2) & (genomatrix$CNV_genotype_1 == genomatrix_CNV_genotype$locus)),]
# only include people with 1 CNV for this part
genomatrix_CNV_genotype$df <- data.frame(genomatrix[which(is.na(genomatrix$CNV_genotype_2) & (genomatrix$CNV_genotype_1 == genomatrix_CNV_genotype$locus)),])
# CNV genotype (store in testable)
testable$genomatrix <- genomatrix[which(is.na(genomatrix$CNV_genotype_2) & (genomatrix$CNV_genotype_1 == testable$locus)), ]
testable$locus
# CNV genotype (store in two lists)
keys <- testable$locus
values <- c()
for(i in seq_along(keys)){
loc <- keys[i]
df <- genomatrix[which((genomatrix$CNV_genotype_1 == loc) & (is.na(genomatrix$CNV_genotype_2))),]
values <- c(values, c(df))
}
values[1]
genomatrix[which((genomatrix$CNV_genotype_1 == loc) & (is.na(genomatrix$CNV_genotype_2))),]
df
genomatrix[which((genomatrix$CNV_genotype_1 == loc) & (is.na(genomatrix$CNV_genotype_2))),]
loc
keys
# CNV genotype (store in two lists)
keys <- testable$locus
values <- c()
for(i in seq_along(keys)){
loc <- keys[i]
df <- genomatrix[which((genomatrix$CNV_genotype_1 == loc) & (is.na(genomatrix$CNV_genotype_2))),]
values <- append(values, c(df))
}
View(values)
# CNV genotype (store in two lists)
keys <- testable$locus
values <- list()
for(i in seq_along(keys)){
loc <- keys[i]
df <- genomatrix[which((genomatrix$CNV_genotype_1 == loc) & (is.na(genomatrix$CNV_genotype_2))),]
values <- append(values, c(df))
}
View(values)
# CNV genotype (store in two lists)
keys <- testable$locus
values <- list()
for(i in seq_along(keys)){
loc <- keys[i]
df <- genomatrix[which((genomatrix$CNV_genotype_1 == loc) & (is.na(genomatrix$CNV_genotype_2))),]
values <- append(values, list(df))
}
View(values)
values[1]
values[[1]]
table(genomatrix$group)
source("~/sebatlab Dropbox/G2MH/NetworkPaper/AnalysisByMolly/UKBB/BMI/BMI_FollowUpAnalyses_09182023.R", echo=TRUE)
genomatrix_no_effect <- genomatrix[which(genomatrix$group == 'no_effect')]
genomatrix_neg <- genomatrix[which(genomatrix$group == 'negative')]
genomatrix_positive <- genomatrix[which(genomatrix$group == 'positive')]
table(genomatrix$group)
genomatrix_no_effect <- genomatrix[which(genomatrix$group == 'no effect')]
genomatrix_no_effect <- genomatrix[which(genomatrix$group == 'no effect'),]
genomatrix_neg <- genomatrix[which(genomatrix$group == 'negative'),]
genomatrix_positive <- genomatrix[which(genomatrix$group == 'positive'),]
model <- lm(res_bmi_inv ~ poly(PRS_BMI_zscore,2) + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model)$coefficients
results
model <- lm(res_bmi_inv ~ poly(PRS_BMI_zscore,1) + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model)$coefficients
results
model <- lm(res_bmi_inv ~ PRS_BMI_zscore + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model)$coefficients
results
model_quadratic <- lm(res_bmi_inv ~ PRS_BMI_zscore*PRS_BMI_zscore + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model_quadratic)$coefficients
results
model_quadratic <- lm(res_bmi_inv ~ PRS_BMI_zscore*PRS_BMI_zscore + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model_quadratic)$coefficients
results
model_quadratic <- lm(res_bmi_inv ~ PRS_BMI_zscore:PRS_BMI_zscore + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model_quadratic)$coefficients
results
model_quadratic <- lm(res_bmi_inv ~ PRS_BMI_zscore + PRS_BMI_zscore^2 + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model_quadratic)$coefficients
results
### Create PRS squared column
genomatrix$PRS_BMI_zscore_squared <- genomatrix$PRS_BMI_zscore * genomatrix$PRS_BMI_zscore
model_quadratic <- lm(res_bmi_inv ~ PRS_BMI_zscore + PRS_BMI_zscore_squared + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model_quadratic)$coefficients
results
model_quadratic <- lm(res_bmi_inv ~ poly(PRS_BMI_zscore,2) + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model_quadratic)$coefficients
results
results
model_quadratic <- lm(res_bmi_inv ~ PRS_BMI_zscore + PRS_BMI_zscore_squared + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- summary(model_quadratic)$coefficients
results
class(results)
model_quadratic <- lm(res_bmi_inv ~ PRS_BMI_zscore + PRS_BMI_zscore_squared + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results <- data.frame(summary(model_quadratic)$coefficients)
results
View(testable)
View(results)
model_quadratic <- lm(res_bmi_inv ~ PRS_BMI_zscore + PRS_BMI_zscore_squared + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results_quadratic <- data.frame(summary(model_quadratic)$coefficients)
write.csv(results_quadratic, 'output/3a_PRS_quadratic.csv')
model_linear <- lm(res_bmi_inv ~ PRS_BMI_zscore + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results_linear <- data.frame(summary(model_linear)$coefficients)
write.csv(results_quadratic, 'output/3b_PRS_linear.csv')
View(results_linear)
View(results_quadratic)
model_quadratic <- lm(res_bmi_inv ~ PRS_BMI_zscore + PRS_BMI_zscore_squared + age + sex + PC1 + PC2 + PC3 + PC4 +
PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = genomatrix, na.action=na.exclude)
results_quadratic <- data.frame(summary(model_quadratic)$coefficients)
write.csv(results_quadratic, 'output/3/PRS_quadratic.csv')
